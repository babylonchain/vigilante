// Code generated by MockGen. DO NOT EDIT.
// Source: btcstaking-tracker/atomicslasher/expected_babylon_client.go

// Package atomicslasher is a generated GoMock package.
package atomicslasher

import (
	context "context"
	reflect "reflect"

	errors "cosmossdk.io/errors"
	types "github.com/babylonchain/babylon/x/btcstaking/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	provider "github.com/cosmos/relayer/v2/relayer/provider"
	gomock "github.com/golang/mock/gomock"
)

// MockBabylonClient is a mock of BabylonClient interface.
type MockBabylonClient struct {
	ctrl     *gomock.Controller
	recorder *MockBabylonClientMockRecorder
}

// MockBabylonClientMockRecorder is the mock recorder for MockBabylonClient.
type MockBabylonClientMockRecorder struct {
	mock *MockBabylonClient
}

// NewMockBabylonClient creates a new mock instance.
func NewMockBabylonClient(ctrl *gomock.Controller) *MockBabylonClient {
	mock := &MockBabylonClient{ctrl: ctrl}
	mock.recorder = &MockBabylonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBabylonClient) EXPECT() *MockBabylonClientMockRecorder {
	return m.recorder
}

// BTCDelegation mocks base method.
func (m *MockBabylonClient) BTCDelegation(stakingTxHashHex string) (*types.QueryBTCDelegationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCDelegation", stakingTxHashHex)
	ret0, _ := ret[0].(*types.QueryBTCDelegationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCDelegation indicates an expected call of BTCDelegation.
func (mr *MockBabylonClientMockRecorder) BTCDelegation(stakingTxHashHex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCDelegation", reflect.TypeOf((*MockBabylonClient)(nil).BTCDelegation), stakingTxHashHex)
}

// BTCDelegations mocks base method.
func (m *MockBabylonClient) BTCDelegations(status types.BTCDelegationStatus, pagination *query.PageRequest) (*types.QueryBTCDelegationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCDelegations", status, pagination)
	ret0, _ := ret[0].(*types.QueryBTCDelegationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCDelegations indicates an expected call of BTCDelegations.
func (mr *MockBabylonClientMockRecorder) BTCDelegations(status, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCDelegations", reflect.TypeOf((*MockBabylonClient)(nil).BTCDelegations), status, pagination)
}

// BTCStakingParamsByVersion mocks base method.
func (m *MockBabylonClient) BTCStakingParamsByVersion(version uint32) (*types.QueryParamsByVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BTCStakingParamsByVersion", version)
	ret0, _ := ret[0].(*types.QueryParamsByVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BTCStakingParamsByVersion indicates an expected call of BTCStakingParamsByVersion.
func (mr *MockBabylonClientMockRecorder) BTCStakingParamsByVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BTCStakingParamsByVersion", reflect.TypeOf((*MockBabylonClient)(nil).BTCStakingParamsByVersion), version)
}

// FinalityProvider mocks base method.
func (m *MockBabylonClient) FinalityProvider(fpBtcPkHex string) (*types.QueryFinalityProviderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalityProvider", fpBtcPkHex)
	ret0, _ := ret[0].(*types.QueryFinalityProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalityProvider indicates an expected call of FinalityProvider.
func (mr *MockBabylonClientMockRecorder) FinalityProvider(fpBtcPkHex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalityProvider", reflect.TypeOf((*MockBabylonClient)(nil).FinalityProvider), fpBtcPkHex)
}

// MustGetAddr mocks base method.
func (m *MockBabylonClient) MustGetAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGetAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// MustGetAddr indicates an expected call of MustGetAddr.
func (mr *MockBabylonClientMockRecorder) MustGetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGetAddr", reflect.TypeOf((*MockBabylonClient)(nil).MustGetAddr))
}

// ReliablySendMsg mocks base method.
func (m *MockBabylonClient) ReliablySendMsg(ctx context.Context, msg types0.Msg, expectedErrors, unrecoverableErrors []*errors.Error) (*provider.RelayerTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReliablySendMsg", ctx, msg, expectedErrors, unrecoverableErrors)
	ret0, _ := ret[0].(*provider.RelayerTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReliablySendMsg indicates an expected call of ReliablySendMsg.
func (mr *MockBabylonClientMockRecorder) ReliablySendMsg(ctx, msg, expectedErrors, unrecoverableErrors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReliablySendMsg", reflect.TypeOf((*MockBabylonClient)(nil).ReliablySendMsg), ctx, msg, expectedErrors, unrecoverableErrors)
}
