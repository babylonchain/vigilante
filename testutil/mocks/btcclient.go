// Code generated by MockGen. DO NOT EDIT.
// Source: btcclient/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/babylonchain/vigilante/types"
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	wire "github.com/btcsuite/btcd/wire"
	gomock "github.com/golang/mock/gomock"
)

// MockBTCClient is a mock of BTCClient interface.
type MockBTCClient struct {
	ctrl     *gomock.Controller
	recorder *MockBTCClientMockRecorder
}

// MockBTCClientMockRecorder is the mock recorder for MockBTCClient.
type MockBTCClientMockRecorder struct {
	mock *MockBTCClient
}

// NewMockBTCClient creates a new mock instance.
func NewMockBTCClient(ctrl *gomock.Controller) *MockBTCClient {
	mock := &MockBTCClient{ctrl: ctrl}
	mock.recorder = &MockBTCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBTCClient) EXPECT() *MockBTCClientMockRecorder {
	return m.recorder
}

// GetBestBlock mocks base method.
func (m *MockBTCClient) GetBestBlock() (*chainhash.Hash, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestBlock")
	ret0, _ := ret[0].(*chainhash.Hash)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBestBlock indicates an expected call of GetBestBlock.
func (mr *MockBTCClientMockRecorder) GetBestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestBlock", reflect.TypeOf((*MockBTCClient)(nil).GetBestBlock))
}

// GetBlockByHash mocks base method.
func (m *MockBTCClient) GetBlockByHash(blockHash *chainhash.Hash) (*types.IndexedBlock, *wire.MsgBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", blockHash)
	ret0, _ := ret[0].(*types.IndexedBlock)
	ret1, _ := ret[1].(*wire.MsgBlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockBTCClientMockRecorder) GetBlockByHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBTCClient)(nil).GetBlockByHash), blockHash)
}

// GetLastBlocks mocks base method.
func (m *MockBTCClient) GetLastBlocks(stopHeight uint64) ([]*types.IndexedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlocks", stopHeight)
	ret0, _ := ret[0].([]*types.IndexedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlocks indicates an expected call of GetLastBlocks.
func (mr *MockBTCClientMockRecorder) GetLastBlocks(stopHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlocks", reflect.TypeOf((*MockBTCClient)(nil).GetLastBlocks), stopHeight)
}

// MustSubscribeBlocks mocks base method.
func (m *MockBTCClient) MustSubscribeBlocks() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MustSubscribeBlocks")
}

// MustSubscribeBlocks indicates an expected call of MustSubscribeBlocks.
func (mr *MockBTCClientMockRecorder) MustSubscribeBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustSubscribeBlocks", reflect.TypeOf((*MockBTCClient)(nil).MustSubscribeBlocks))
}

// Stop mocks base method.
func (m *MockBTCClient) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockBTCClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBTCClient)(nil).Stop))
}

// WaitForShutdown mocks base method.
func (m *MockBTCClient) WaitForShutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForShutdown")
}

// WaitForShutdown indicates an expected call of WaitForShutdown.
func (mr *MockBTCClientMockRecorder) WaitForShutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForShutdown", reflect.TypeOf((*MockBTCClient)(nil).WaitForShutdown))
}
